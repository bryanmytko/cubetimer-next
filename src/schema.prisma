// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator pothos {
  provider = "prisma-pothos-types"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
}

model Solve {
  id        Int    @id @default(autoincrement())
  penalty   Int?
  puzzle    String
  scramble  String
  time      Int
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  solveSession   SolveSession? @relation(fields: [solveSessionId], references: [id], onDelete: Cascade)
  solveSessionId String?

  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
}

model SolveSession {
  id       String    @id @default(cuid())
  size     Int
  solves   Solve[]
  userId   String
  user     User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
}

model Test {
  id       String    @id @default(cuid())
  name     String
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  solves        Solve[]
  solveSessions SolveSession[]

  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt

  @@unique([identifier, token])
}
